name: Publish on NPM
on:
  schedule:
    - cron: "0 10 * * *"
  push:
jobs:
  check_version:
    runs-on: ubuntu-latest
    outputs:
      is_new_version: ${{steps.git-check.outputs.new-ver}}
      new_version: ${{steps.save-version.outputs.ver-number}}
    steps:
      - uses: actions/checkout@v2
      - name: Fetch release version
        run: echo ::set-output name=ver-number::$(curl -sL https://api.github.com/repos/devicons/devicon/releases/latest | jq -r ".tag_name")
      - name: Check for newest version
        id: git-check
        run: echo ::set-output name=new-ver::$([$(curl -sL https://api.github.com/repos/maltejur/react-devicons/releases/latest | jq -r ".tag_name") = $(cat devicon-latest.txt) ] && echo "true" || echo "false" )
      - name: Save new version number
        id: save-version
        run: echo ::set-output name=ver-number::$(cat devicon-latest.txt)
      - run: echo ${{steps.git-check.outputs.modified}} && echo ${{steps.save-version.outputs.ver-number}}
  publish:
    needs: check_version
    if: needs.jobs.outputs.is_new_version == 'true'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-node@v2
        with:
          node-version: "14"
      - name: Install dependencies
        run: yarn
      - name: Build
        run: yarn build
      - name: Publish
        run: yarn publish --non-interactive --new-version ${{needs.jobs.outputs.new_version}}
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NODE_AUTH_TOKEN }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
